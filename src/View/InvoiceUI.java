/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import control.Multiuse;
import control.Printinvoice;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.*;

/**
 *
 * @author Gihan
 */
public class InvoiceUI extends javax.swing.JPanel {
    Multiuse multiuse;
    Invoice invoice;
    Invoiceredords invrecords;
    Returnrecords retrecords;
    Dealer dealer;
    Dealerbalance dealerbal;
    Cheque cheque;
    Bookstock bookstock;
    Printinvoice printinvoice;
    
    
    int dealerid;
    int bookid;
    int discount;
    int soldqty;
    int chequeno;
    String currdealer;
    String dcity;
    double dealerbalance;
    double currdbalance;
    double itemprice;
    double discountprice;
    double amount;
    double invoicetotal = 0.00;
    double soldtotal = 0.00;
    double returntotal = 0.00;
    double paytotal = 0.00;
    double cash;
    double paidtotal;
    double chequeamount;
    double balance;
    
    
    
    /**
     * Creates new form InvoiceUI
     */
    public InvoiceUI() {
        initComponents();
        initalProcesses();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        type = new javax.swing.ButtonGroup();
        paymethod = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        scrolldealer = new javax.swing.JScrollPane();
        listdealer = new javax.swing.JList();
        scrollbook = new javax.swing.JScrollPane();
        listbook = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        tdealer = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tbook = new javax.swing.JTextField();
        baddreturn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lcredit = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tqty = new javax.swing.JTextField();
        lamount = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        rbtndealer = new javax.swing.JRadioButton();
        rbtncustomer = new javax.swing.JRadioButton();
        lsignal = new javax.swing.JLabel();
        cmbdiscount = new javax.swing.JComboBox();
        ldiscprice = new javax.swing.JLabel();
        bdel2 = new javax.swing.JButton();
        chnodiscount = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        litemprice = new javax.swing.JLabel();
        baddinvoice = new javax.swing.JButton();
        bdel1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        ltotal = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        lcash = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        lbalance = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        tcash = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblinvoice = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblreturn = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        lsoldtotal = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        lreturntot = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        rbtncash = new javax.swing.JRadioButton();
        rbtncheque = new javax.swing.JRadioButton();
        rbtnboth = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        tchnumber = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        dtchdate = new com.toedter.calendar.JDateChooser();
        jLabel18 = new javax.swing.JLabel();
        tchbank = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        tchamount = new javax.swing.JTextField();
        bcomplete = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        linvoicetot = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));

        jPanel1.setBackground(new java.awt.Color(191, 205, 219));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listdealer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        listdealer.setForeground(new java.awt.Color(255, 51, 51));
        listdealer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listdealerMouseClicked(evt);
            }
        });
        listdealer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listdealerKeyPressed(evt);
            }
        });
        scrolldealer.setViewportView(listdealer);

        jPanel1.add(scrolldealer, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, 310, 10));

        listbook.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        listbook.setForeground(new java.awt.Color(255, 51, 51));
        listbook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listbookMouseClicked(evt);
            }
        });
        listbook.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listbookKeyPressed(evt);
            }
        });
        scrollbook.setViewportView(listbook);

        jPanel1.add(scrollbook, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, 310, 10));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Dealer:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 70, -1, -1));

        tdealer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tdealer.setForeground(new java.awt.Color(255, 51, 51));
        tdealer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tdealerKeyReleased(evt);
            }
        });
        jPanel1.add(tdealer, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 310, 35));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Book:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        tbook.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tbook.setForeground(new java.awt.Color(255, 51, 51));
        tbook.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbookKeyReleased(evt);
            }
        });
        jPanel1.add(tbook, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 310, 35));

        baddreturn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        baddreturn.setText("Add-");
        baddreturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baddreturnActionPerformed(evt);
            }
        });
        jPanel1.add(baddreturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 210, 88, 36));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Credit:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, -1, 30));

        lcredit.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lcredit.setForeground(new java.awt.Color(204, 0, 0));
        lcredit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lcredit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lcredit, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 60, 110, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("QTY:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        tqty.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tqty.setForeground(new java.awt.Color(255, 51, 51));
        tqty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tqtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tqtyKeyReleased(evt);
            }
        });
        jPanel1.add(tqty, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 71, 35));

        lamount.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lamount.setForeground(new java.awt.Color(255, 0, 0));
        lamount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lamount.setText("0.0");
        lamount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lamount, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 210, 86, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Amount:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, -1, -1));

        rbtndealer.setBackground(new java.awt.Color(255, 255, 255));
        type.add(rbtndealer);
        rbtndealer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        rbtndealer.setForeground(new java.awt.Color(0, 102, 255));
        rbtndealer.setText("Dealer Invoice");
        rbtndealer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtndealerItemStateChanged(evt);
            }
        });
        jPanel1.add(rbtndealer, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 16, -1, -1));

        rbtncustomer.setBackground(new java.awt.Color(255, 255, 255));
        type.add(rbtncustomer);
        rbtncustomer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        rbtncustomer.setForeground(new java.awt.Color(0, 102, 255));
        rbtncustomer.setText("Customer Invoice");
        rbtncustomer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtncustomerItemStateChanged(evt);
            }
        });
        jPanel1.add(rbtncustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 16, 160, -1));

        lsignal.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        lsignal.setForeground(new java.awt.Color(0, 153, 51));
        jPanel1.add(lsignal, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 12, 67, 40));

        cmbdiscount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmbdiscount.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbdiscountItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbdiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 110, 50, 30));

        ldiscprice.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ldiscprice.setForeground(new java.awt.Color(0, 102, 255));
        ldiscprice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ldiscprice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(ldiscprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 110, 60, 30));

        bdel2.setText("Del-");
        bdel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdel2ActionPerformed(evt);
            }
        });
        jPanel1.add(bdel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 210, 70, 36));

        chnodiscount.setBackground(new java.awt.Color(255, 255, 255));
        chnodiscount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chnodiscount.setForeground(new java.awt.Color(255, 51, 51));
        chnodiscount.setText("No Discount");
        chnodiscount.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chnodiscountItemStateChanged(evt);
            }
        });
        jPanel1.add(chnodiscount, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 170, 110, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Item Price:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, -1, 30));

        litemprice.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        litemprice.setForeground(new java.awt.Color(0, 102, 255));
        litemprice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        litemprice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(litemprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, 77, 30));

        baddinvoice.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        baddinvoice.setText("Add+");
        baddinvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baddinvoiceActionPerformed(evt);
            }
        });
        jPanel1.add(baddinvoice, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, 88, 36));

        bdel1.setText("Del+");
        bdel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdel1ActionPerformed(evt);
            }
        });
        jPanel1.add(bdel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 210, 70, 36));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 255), 2, true));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Total (LKR)");

        ltotal.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        ltotal.setForeground(new java.awt.Color(255, 0, 0));
        ltotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ltotal.setText("0.00");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel8)
                .addContainerGap(44, Short.MAX_VALUE))
            .addComponent(ltotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ltotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 255), 2, true));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Paid Amount (LKR)");

        lcash.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lcash.setForeground(new java.awt.Color(0, 102, 51));
        lcash.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lcash.setText("0.00");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lcash, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lcash, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 255), 2, true));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Balance (LKR)");

        lbalance.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lbalance.setForeground(new java.awt.Color(153, 0, 0));
        lbalance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbalance.setText("0.00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel12))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(lbalance, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbalance, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Cash:");

        tcash.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tcash.setForeground(new java.awt.Color(255, 51, 51));
        tcash.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tcashKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tcash, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tcash, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        tblinvoice.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        tblinvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B.ID", "Book Title", "I.Price", "D.Price", "Qty", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblinvoice.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblinvoice.setRowHeight(22);
        tblinvoice.setSelectionBackground(new java.awt.Color(0, 0, 255));
        tblinvoice.setSelectionForeground(new java.awt.Color(255, 255, 204));
        jScrollPane1.setViewportView(tblinvoice);
        tblinvoice.getColumnModel().getColumn(0).setMinWidth(30);
        tblinvoice.getColumnModel().getColumn(0).setPreferredWidth(30);
        tblinvoice.getColumnModel().getColumn(0).setMaxWidth(40);
        tblinvoice.getColumnModel().getColumn(2).setMinWidth(50);
        tblinvoice.getColumnModel().getColumn(2).setPreferredWidth(50);
        tblinvoice.getColumnModel().getColumn(2).setMaxWidth(50);
        tblinvoice.getColumnModel().getColumn(3).setMinWidth(50);
        tblinvoice.getColumnModel().getColumn(3).setPreferredWidth(50);
        tblinvoice.getColumnModel().getColumn(3).setMaxWidth(50);
        tblinvoice.getColumnModel().getColumn(4).setMinWidth(50);
        tblinvoice.getColumnModel().getColumn(4).setPreferredWidth(50);
        tblinvoice.getColumnModel().getColumn(4).setMaxWidth(50);
        tblinvoice.getColumnModel().getColumn(5).setMinWidth(60);
        tblinvoice.getColumnModel().getColumn(5).setPreferredWidth(60);
        tblinvoice.getColumnModel().getColumn(5).setMaxWidth(60);

        tblreturn.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        tblreturn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "B.ID", "Book Title", "I.Price", "D.Price", "Qty", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblreturn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblreturn.setRowHeight(22);
        tblreturn.setSelectionBackground(new java.awt.Color(0, 0, 255));
        tblreturn.setSelectionForeground(new java.awt.Color(255, 255, 204));
        jScrollPane2.setViewportView(tblreturn);
        tblreturn.getColumnModel().getColumn(0).setMinWidth(30);
        tblreturn.getColumnModel().getColumn(0).setPreferredWidth(30);
        tblreturn.getColumnModel().getColumn(0).setMaxWidth(30);
        tblreturn.getColumnModel().getColumn(2).setMinWidth(50);
        tblreturn.getColumnModel().getColumn(2).setPreferredWidth(50);
        tblreturn.getColumnModel().getColumn(2).setMaxWidth(50);
        tblreturn.getColumnModel().getColumn(3).setMinWidth(50);
        tblreturn.getColumnModel().getColumn(3).setPreferredWidth(50);
        tblreturn.getColumnModel().getColumn(3).setMaxWidth(50);
        tblreturn.getColumnModel().getColumn(4).setMinWidth(50);
        tblreturn.getColumnModel().getColumn(4).setPreferredWidth(50);
        tblreturn.getColumnModel().getColumn(4).setMaxWidth(50);
        tblreturn.getColumnModel().getColumn(5).setMinWidth(60);
        tblreturn.getColumnModel().getColumn(5).setPreferredWidth(60);
        tblreturn.getColumnModel().getColumn(5).setMaxWidth(60);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Sold Total", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 51, 255))); // NOI18N

        lsoldtotal.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lsoldtotal.setForeground(new java.awt.Color(255, 51, 51));
        lsoldtotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lsoldtotal.setText("0.00");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lsoldtotal, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(lsoldtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Return Total", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 51, 255))); // NOI18N

        lreturntot.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lreturntot.setForeground(new java.awt.Color(255, 51, 51));
        lreturntot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lreturntot.setText("0.00");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lreturntot, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(lreturntot, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Pay Method", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        rbtncash.setBackground(new java.awt.Color(255, 255, 255));
        paymethod.add(rbtncash);
        rbtncash.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        rbtncash.setText("Cash");
        rbtncash.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtncashItemStateChanged(evt);
            }
        });

        rbtncheque.setBackground(new java.awt.Color(255, 255, 255));
        paymethod.add(rbtncheque);
        rbtncheque.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        rbtncheque.setText("Cheque");
        rbtncheque.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnchequeItemStateChanged(evt);
            }
        });

        rbtnboth.setBackground(new java.awt.Color(255, 255, 255));
        paymethod.add(rbtnboth);
        rbtnboth.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        rbtnboth.setText("Both");
        rbtnboth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnbothItemStateChanged(evt);
            }
        });
        rbtnboth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnbothActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(rbtncash)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(rbtncheque)
                .addGap(28, 28, 28))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(rbtnboth, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtncash)
                    .addComponent(rbtncheque))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbtnboth)
                .addContainerGap())
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Ch. Num:");

        tchnumber.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tchnumber.setForeground(new java.awt.Color(255, 51, 51));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Date:");

        dtchdate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Bank:");

        tchbank.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tchbank.setForeground(new java.awt.Color(255, 51, 51));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Ch. Amount:");

        tchamount.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tchamount.setForeground(new java.awt.Color(255, 51, 51));
        tchamount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tchamountKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tchbank, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tchnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tchamount))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dtchdate, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dtchdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tchnumber, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tchbank, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel15)
                    .addComponent(tchamount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bcomplete.setText("Complete");
        bcomplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcompleteActionPerformed(evt);
            }
        });

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Invoice Total", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 51, 255))); // NOI18N

        linvoicetot.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        linvoicetot.setForeground(new java.awt.Color(255, 51, 51));
        linvoicetot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linvoicetot.setText("0.00");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(linvoicetot, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(linvoicetot, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(bcomplete, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bcomplete, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rbtndealerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtndealerItemStateChanged
        ButtonModel dealer = rbtndealer.getModel();
        ButtonModel customer = rbtncustomer.getModel();
        
        if(type.isSelected(dealer)){ 
            lsignal.setForeground(Color.red); 
            lsignal.setText("D"); 
            tdealer.setEnabled(true); 
        } else if(type.isSelected(customer)){
            lsignal.setForeground(Color.blue); 
            lsignal.setText("C");
            tdealer.setEnabled(false);
        }
        
    }//GEN-LAST:event_rbtndealerItemStateChanged

    private void rbtncustomerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtncustomerItemStateChanged
        ButtonModel dealer1 = rbtndealer.getModel();
        ButtonModel customer = rbtncustomer.getModel();
        
        if(type.isSelected(dealer1)){ 
            lsignal.setForeground(Color.red); 
            lsignal.setText("D"); 
            tdealer.setEnabled(true);
        } else if(type.isSelected(customer)){
            lsignal.setForeground(Color.blue); 
            lsignal.setText("C");
            tdealer.setEnabled(false);
        }
    }//GEN-LAST:event_rbtncustomerItemStateChanged

    private void rbtncashItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtncashItemStateChanged
        payMethodChange();
        
    }//GEN-LAST:event_rbtncashItemStateChanged

    private void rbtnchequeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnchequeItemStateChanged
        payMethodChange();
    }//GEN-LAST:event_rbtnchequeItemStateChanged

    private void tdealerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tdealerKeyReleased
        multiuse = new Multiuse();
        multiuse.delaerSearch(listdealer, scrolldealer, tdealer.getText());
        
        if(evt.getKeyCode() == KeyEvent.VK_DOWN){
            listdealer.grabFocus();
            
        }
    }//GEN-LAST:event_tdealerKeyReleased

    private void listdealerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listdealerKeyPressed
        Vector vec = new Vector();
        multiuse = new Multiuse();
        dealer = new Dealer();
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            tdealer.setText(""+listdealer.getSelectedValue()); 
            scrolldealer.setSize(scrolldealer.getWidth(), 0);
            tdealer.setBackground(Color.white);
            listdealer.setVisible(false);  
            scrolldealer.setVisible(false); 
            tbook.grabFocus();
            this.dealerid = multiuse.getDealerId(tdealer.getText());
            this.currdealer = multiuse.getDealerName(tdealer.getText()); 
            this.dealerbalance = multiuse.getDealerBalance(dealerid);
            this.currdbalance = multiuse.getDealerBalance(dealerid);
            this.dcity = dealer.getDealerCity(dealerid);
            lcredit.setText(""+dealerbalance); 
            
        }
    }//GEN-LAST:event_listdealerKeyPressed

    private void listdealerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listdealerMouseClicked
        multiuse = new Multiuse();
        dealer = new Dealer();
        
        tdealer.setText(""+listdealer.getSelectedValue()); 
        scrolldealer.setSize(scrolldealer.getWidth(), 0);
        tdealer.setBackground(Color.white);
        listdealer.setVisible(false);  
        scrolldealer.setVisible(false);
        tbook.grabFocus();
        this.dealerid = multiuse.getDealerId(tdealer.getText());
        this.currdealer = multiuse.getDealerName(tdealer.getText());
        this.dealerbalance = multiuse.getDealerBalance(dealerid);
        this.currdbalance = multiuse.getDealerBalance(dealerid);
        this.dcity = dealer.getDealerCity(dealerid);
        lcredit.setText(""+dealerbalance);
        
    }//GEN-LAST:event_listdealerMouseClicked

    private void tbookKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbookKeyReleased
        if(!tbook.getText().trim().equals("")){
            multiuse = new Multiuse();
            multiuse.BookSearch(listbook, scrollbook, tbook.getText());
        
            if(evt.getKeyCode() == KeyEvent.VK_DOWN){
                listbook.grabFocus();
            
            }
        }
        
    }//GEN-LAST:event_tbookKeyReleased

    private void listbookKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listbookKeyPressed
        Vector vec = new Vector();
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            tbook.setText(""+listbook.getSelectedValue()); 
            scrollbook.setSize(scrollbook.getWidth(), 0);
            tbook.setBackground(Color.white);
            listbook.setVisible(false);  
            scrollbook.setVisible(false); 
            tqty.grabFocus();
            this.bookid = multiuse.getBookId(tbook.getText());
            this.itemprice = multiuse.getItemPrice(bookid);
            litemprice.setText(""+itemprice); 
            cmbdiscount.removeAllItems();
            multiuse.loadDiscounts(cmbdiscount, bookid); 
            this.discountprice = itemprice - (itemprice * (Integer.parseInt(cmbdiscount.getSelectedItem().toString())) / 100.0) ;
            ldiscprice.setText(""+discountprice);
            
        }
    }//GEN-LAST:event_listbookKeyPressed

    private void listbookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listbookMouseClicked
        tbook.setText(""+listbook.getSelectedValue()); 
        scrollbook.setSize(scrollbook.getWidth(), 0);
        tbook.setBackground(Color.white);
        listbook.setVisible(false);  
        scrollbook.setVisible(false); 
        tqty.grabFocus();
        this.bookid = multiuse.getBookId(tbook.getText());
        this.itemprice = multiuse.getItemPrice(bookid);
        litemprice.setText(""+itemprice);
        cmbdiscount.removeAllItems();
        multiuse.loadDiscounts(cmbdiscount, bookid);
        this.discountprice = itemprice - (itemprice * (Integer.parseInt(cmbdiscount.getSelectedItem().toString())) / 100) ;
        ldiscprice.setText(""+discountprice);
            
    }//GEN-LAST:event_listbookMouseClicked

    private void baddreturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baddreturnActionPerformed
        try {
            Vector vec = new Vector();
            multiuse = new Multiuse();
        
            DefaultTableModel dt = (DefaultTableModel) tblreturn.getModel();
            vec.add(multiuse.getBookId(tbook.getText())); 
            vec.add(multiuse.getBookTitle(tbook.getText())); 
            vec.add(itemprice); 
            vec.add(discountprice);
            vec.add(tqty.getText()); 
            vec.add(amount); 
            dt.addRow(vec); 
            lreturntot.setText(""+getReturnTotal());
            linvoicetot.setText(""+getInvoiceTotal());
            ltotal.setText(""+getPayTotal());
            multiuse.setBookId();
            tbook.setText(""); 
            tqty.setText(""); 
            tbook.grabFocus();
            this.amount = 0.0;
            this.itemprice = 0.0;
            this.discountprice = 0.0;
            litemprice.setText(""+itemprice);
            ldiscprice.setText(""+discountprice);
            lamount.setText(""+amount);
            cmbdiscount.removeAllItems();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Select Book! " + e, "Warning!", 2); 
        }
        
    }//GEN-LAST:event_baddreturnActionPerformed

    private void tqtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tqtyKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            baddinvoiceActionPerformed(null); 
        }else if(evt.getKeyCode() == KeyEvent.VK_UP){
            baddreturnActionPerformed(null); 
        }
        
    }//GEN-LAST:event_tqtyKeyPressed

    private void bcompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcompleteActionPerformed
        ButtonModel cashs = rbtncash.getModel();
        ButtonModel cheque = rbtncheque.getModel();
        ButtonModel both = rbtnboth.getModel();
        printinvoice = new Printinvoice();
        
//-------------------------------------------PAY CASH-------------------------------------------------------------------------------------------------        
        if(paymethod.isSelected(cashs)){ 
            
            if(dealerid != 0 && !tdealer.getText().trim().equals("") && !tcash.getText().trim().equals("")){
                if(tblinvoice.getRowCount() != 0 || tblreturn.getRowCount() != 0){
                    if(tblreturn.getRowCount() == 0){
                        
                        if(cash >= paytotal){
                            payWithoutReturn("cash", 1, 1);
                        }else if(cash < paytotal){
                            payWithoutReturn("cash", 2, 0);
                        }
                        
                        this.setInvoiceDetails(1); 
                        printinvoice.printThisInvoice(tblinvoice.getRowCount(), tblreturn.getRowCount());
                        clearTable(tblinvoice); 
                        setZero();
                        
                    }else if(tblinvoice.getRowCount() == 0){
                        returnOnlyMessage();
                        
                    }else{
                        if(cash >= paytotal){
                            payWithReturn("cash", 1, 1); 
                        }else if(cash < paytotal){
                            payWithReturn("cash", 2, 0);
                        }
                        
                        this.setInvoiceDetails(1);
                        printinvoice.printThisInvoice(tblinvoice.getRowCount(), tblreturn.getRowCount());
                        clearTable(tblinvoice); 
                        clearTable(tblreturn); 
                        setZero();
                    }
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Add Books to Invoice / Return Table!", "Warning!", 2);
                }
                
            }else{
                JOptionPane.showMessageDialog(null, "Fill All Values & Select Dealer Correctly!", "Warning!", 2);
            }
//-------------------------------------------PAY CHEQUE-------------------------------------------------------------------------------------------------    
        } else if(paymethod.isSelected(cheque)){
            
            if(dealerid != 0 && !tdealer.getText().trim().equals("") && !tchamount.getText().trim().equals("") && !tchnumber.getText().trim().equals("") && !tchbank.getText().trim().equals("")){
                if(tblinvoice.getRowCount() != 0 || tblreturn.getRowCount() != 0){
                    
                    if(tblreturn.getRowCount() == 0){
                        
                        if(chequeamount >= paytotal){
                            payWithoutReturn("cheque", 1, 1);
                            addChequeDetails();
                        }else if(chequeamount < paytotal){
                            payWithoutReturn("cheque", 2, 0);
                            addChequeDetails();
                        }
                        
                        this.setInvoiceDetails(2);
                        printinvoice.printThisInvoice(tblinvoice.getRowCount(), tblreturn.getRowCount());
                        clearTable(tblinvoice); 
                        setZero();
                        
                    }else if(tblinvoice.getRowCount() == 0){
                        returnOnlyMessage();
                        
                    }else{
                        if(chequeamount >= paytotal){
                            payWithReturn("cheque", 1, 1);
                            addChequeDetails();
                        }else if(chequeamount < paytotal){
                            payWithReturn("cheque", 2, 0);
                            addChequeDetails();
                        }
                        
                        this.setInvoiceDetails(2);
                        printinvoice.printThisInvoice(tblinvoice.getRowCount(), tblreturn.getRowCount());
                        clearTable(tblinvoice); 
                        clearTable(tblreturn); 
                        setZero();
                    }
                    
                    System.out.println("Ok from Cheque");
                }else{
                    JOptionPane.showMessageDialog(null, "Add Books to Invoice / Return Table!", "Warning!", 2);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Fill All Details(Pay and Cheque) & Select Dealer Correctly!", "Warning!", 2);
            }
//-------------------------------------------PAY BOTH-------------------------------------------------------------------------------------------------         
        } else if(paymethod.isSelected(both)){
            
            paidtotal = cash + chequeamount;
            
            if(dealerid != 0 && !tdealer.getText().trim().equals("") && !tchamount.getText().trim().equals("") && !tchnumber.getText().trim().equals("") && !tchbank.getText().trim().equals("") && !tcash.getText().trim().equals("")){
                if(tblinvoice.getRowCount() != 0 || tblreturn.getRowCount() != 0){
                    
                    if(tblreturn.getRowCount() == 0){
                        
                        if(paidtotal >= paytotal){
                            payWithoutReturn("both", 1, 1);
                            addChequeDetails();
                        }else if(paidtotal < paytotal){
                            payWithoutReturn("both", 2, 0);
                            addChequeDetails();
                        }
                        
                        this.setInvoiceDetails(3);
                        printinvoice.printThisInvoice(tblinvoice.getRowCount(), tblreturn.getRowCount());
                        clearTable(tblinvoice); 
                        setZero();
                        
                    }else if(tblinvoice.getRowCount() == 0){
                        returnOnlyMessage();
                        
                    }else{
                        if(paidtotal >= paytotal){
                            payWithReturn("both", 1, 1);
                            addChequeDetails();
                        }else if(paidtotal < paytotal){
                            payWithReturn("both", 2, 0);
                            addChequeDetails();
                        }
                        
                        this.setInvoiceDetails(3);
                        printinvoice.printThisInvoice(tblinvoice.getRowCount(), tblreturn.getRowCount());
                        clearTable(tblinvoice); 
                        clearTable(tblreturn); 
                        setZero();
                    }
                    
                    System.out.println("Ok from Cheque");
                }else{
                    JOptionPane.showMessageDialog(null, "Add Books to Invoice / Return Table!", "Warning!", 2);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Fill All Details(Pay and Cheque) & Select Dealer Correctly!", "Warning!", 2);
            }
            
        }
        
        
        
        
    }//GEN-LAST:event_bcompleteActionPerformed

    private void baddinvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baddinvoiceActionPerformed
        try {
            Vector vec = new Vector();
            multiuse = new Multiuse();
        
            DefaultTableModel dt = (DefaultTableModel) tblinvoice.getModel();
            vec.add(multiuse.getBookId(tbook.getText())); 
            vec.add(multiuse.getBookTitle(tbook.getText())); 
            vec.add(itemprice); 
            vec.add(discountprice); 
            vec.add(tqty.getText()); 
            vec.add(this.amount); 
            dt.addRow(vec); 
            lsoldtotal.setText(""+getSoldTotal()); 
            linvoicetot.setText(""+getInvoiceTotal());
            ltotal.setText(""+getPayTotal()); 
            multiuse.setBookId();
            tbook.setText(""); 
            tqty.setText(""); 
            this.amount = 0.0;
            this.itemprice = 0.0;
            this.discountprice = 0.0;
            litemprice.setText(""+itemprice);
            ldiscprice.setText(""+discountprice);
            lamount.setText(""+amount);
            cmbdiscount.removeAllItems();
            tbook.grabFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Select Book! " + e, "Warning!", 2); 
        }
    }//GEN-LAST:event_baddinvoiceActionPerformed

    private void cmbdiscountItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbdiscountItemStateChanged
        
        if(cmbdiscount.getItemCount() >= 1){
            this.discountprice = itemprice - (itemprice * (Integer.parseInt(cmbdiscount.getSelectedItem().toString())) / 100.0) ;
            ldiscprice.setText(""+discountprice);
        }
        
    }//GEN-LAST:event_cmbdiscountItemStateChanged

    private void tqtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tqtyKeyReleased
        if(!tqty.getText().isEmpty()){
            for(int x=0; x < tqty.getText().length(); x++){
                char c = tqty.getText().charAt(x);
                    if(!Character.isDigit(c)){
                        String text = tqty.getText().substring(0, x);
                        tqty.setText(null);
                        tqty.setText(text);
                        tqty.setText(""); 
                    }
            }
        }else{
            tqty.setText(""); 
        }
        
        if(!tqty.getText().trim().equals("")){
            
            if(chnodiscount.isSelected()){
                this.soldqty = Integer.parseInt(tqty.getText());
                this.amount = soldqty * itemprice;
                lamount.setText(""+amount);
            }else{
                this.soldqty = Integer.parseInt(tqty.getText());
                this.amount = soldqty * discountprice;
                lamount.setText(""+amount);
            }
            
        }
        
        
        
        
    }//GEN-LAST:event_tqtyKeyReleased

    private void chnodiscountItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chnodiscountItemStateChanged
        if(chnodiscount.isSelected()){
            this.discountprice = this.itemprice;
        }else{
            this.discountprice = itemprice - (itemprice * (Integer.parseInt(cmbdiscount.getSelectedItem().toString())) / 100) ;
        }
    }//GEN-LAST:event_chnodiscountItemStateChanged

    private void tcashKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tcashKeyReleased
        ButtonModel cashs = rbtncash.getModel();
        ButtonModel cheque = rbtncheque.getModel();
        ButtonModel both = rbtnboth.getModel();
        double bothamount = 0.0;
        
//        if(!tcash.getText().isEmpty()){
//            for(int x=0; x < tcash.getText().length(); x++){
//                char c = tcash.getText().charAt(x);
//                    if(!Character.isDigit(c)){
//                        String text = tcash.getText().substring(0, x);
//                        tcash.setText(null);
//                        tcash.setText(text);
//                        tcash.setText(""); 
//                    }
//            }
//        }else{
//            tcash.setText(""); 
//        }
        
        this.cash = Double.parseDouble(tcash.getText());
        
        
        if(paymethod.isSelected(cashs) || paymethod.isSelected(cheque)){
            if(cash > paytotal){
                this.balance = cash - paytotal;
                lbalance.setText(""+balance); 
            }
        }else if(paymethod.isSelected(both)){
            bothamount = cash + chequeamount;
            if(bothamount > paytotal){
                this.balance = bothamount - paytotal;
                lbalance.setText(""+balance); 
            }
        }
        
        
        
        
    }//GEN-LAST:event_tcashKeyReleased

    private void rbtnbothItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnbothItemStateChanged
        payMethodChange();
        
    }//GEN-LAST:event_rbtnbothItemStateChanged

    private void rbtnbothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnbothActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnbothActionPerformed

    private void tchamountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tchamountKeyReleased
        ButtonModel cashs = rbtncash.getModel();
        ButtonModel cheque = rbtncheque.getModel();
        ButtonModel both = rbtnboth.getModel();
        double bothamount = 0.0;
        
        
//        if(!tchamount.getText().isEmpty()){
//            for(int x=0; x < tchamount.getText().length(); x++){
//                char c = tchamount.getText().charAt(x);
//                    if(!Character.isDigit(c)){
//                        String text = tchamount.getText().substring(0, x);
//                        tchamount.setText(null);
//                        tchamount.setText(text);
//                        tchamount.setText(""); 
//                    }
//            }
//        }else{
//            tchamount.setText(""); 
//        }
        
        this.chequeamount = Double.parseDouble(tchamount.getText());
        
        if(paymethod.isSelected(cheque)){
            if(chequeamount > paytotal){
                this.balance = chequeamount - paytotal;
                lbalance.setText(""+balance); 
            }
        }else if(paymethod.isSelected(both)){
            bothamount = cash + chequeamount;
            System.out.println("BA: " + bothamount);
            if(bothamount > paytotal){
                this.balance = bothamount - paytotal;
                lbalance.setText(""+balance); 
            }
        }
        
        
        
        
    }//GEN-LAST:event_tchamountKeyReleased

    private void bdel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdel2ActionPerformed
        try {
            if(tblreturn.getSelectedRow() != -1){
                DefaultTableModel dt = (DefaultTableModel) tblreturn.getModel();
                dt.removeRow(tblreturn.getSelectedRow()); 
            }
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
        
        lreturntot.setText(""+getReturnTotal());
        linvoicetot.setText(""+getInvoiceTotal());
        ltotal.setText(""+getPayTotal());
            
    }//GEN-LAST:event_bdel2ActionPerformed

    private void bdel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdel1ActionPerformed

        try {
            if(tblinvoice.getSelectedRow() != -1){
                DefaultTableModel dt = (DefaultTableModel) tblinvoice.getModel();
                dt.removeRow(tblinvoice.getSelectedRow()); 
            }
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
    
        lsoldtotal.setText(""+getSoldTotal()); 
        linvoicetot.setText(""+getInvoiceTotal());
        ltotal.setText(""+getPayTotal());
        
    }//GEN-LAST:event_bdel1ActionPerformed
    
    int getDealerId(){
        
        
        return dealerid;
    }
    
    void payMethodChange(){
        ButtonModel cash = rbtncash.getModel();
        ButtonModel cheque = rbtncheque.getModel();
        ButtonModel both = rbtnboth.getModel();
        
        if(paymethod.isSelected(cash)){ 
            tcash.setEnabled(true); 
            tchamount.setEnabled(false);
            tchnumber.setEnabled(false);
            tchbank.setEnabled(false); 
            dtchdate.setEnabled(false); 
        } else if(paymethod.isSelected(cheque)){
            tchamount.setEnabled(true);
            tchnumber.setEnabled(true);
            tchbank.setEnabled(true); 
            dtchdate.setEnabled(true);
            tcash.setEnabled(false);
        } else if(paymethod.isSelected(both)){
            tchamount.setEnabled(true);
            tchnumber.setEnabled(true);
            tchbank.setEnabled(true); 
            dtchdate.setEnabled(true);
            tcash.setEnabled(true);
        }
        
        
    }
    
    double getSoldTotal(){
        int rows = tblinvoice.getRowCount();
        soldtotal = 0.0;
        for(int x = 0; x < rows; x++){
            double rowamount = Double.parseDouble(tblinvoice.getValueAt(x, 5).toString()); 
            soldtotal += rowamount;
        }
        
        return soldtotal;
    }
    
    double getReturnTotal(){
        int rows = tblreturn.getRowCount();
        returntotal = 0.0;
        for(int x = 0; x < rows; x++){
            double rowamount = Double.parseDouble(tblreturn.getValueAt(x, 5).toString()); 
            returntotal += rowamount;
        }
        
        return returntotal;
    }
    
    double getInvoiceTotal(){
        invoicetotal = soldtotal - returntotal;
        
        return invoicetotal;
    }
    
    double getPayTotal(){
        paytotal = dealerbalance + invoicetotal;
        
        return  paytotal;
    }
    
    boolean totalOk(){
        boolean totalok = false;
        
        if(paytotal < 0){
            totalok = false;
        }else{
            totalok = true;
        }
        
        return totalok;
        
    }

//---------------------------------------------------------------------------------------------------------------------------------------------------    
    void payWithoutReturn(String ptype, int val, int val2){
        if(ptype.equals("cash")){
            if(val == 1){
                dealerbalance = 0.00;
            }else if(val == 2){
                dealerbalance = (paytotal - cash);
            }
        }else if(ptype.equals("cheque")){
            if(val == 1){
                dealerbalance = 0.00;
            }else if(val == 2){
                dealerbalance = (paytotal - chequeamount);
            }
        }else if(ptype.equals("both")){
            if(val == 1){
                dealerbalance = 0.00;
            }else if(val == 2){
                dealerbalance = (paytotal - paidtotal);
            }
        }
        
            if(totalOk()){
                if(addToInvoice(ptype, val2)){
                    if(SetDealerBalance()){
                        JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                    }else{
                        JOptionPane.showMessageDialog(null, "Error! While Setting Dealer Balance, Try Again!", "Error!", 0);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
            }
            
    }
    
    void payWithReturn(String ptype, int val, int val2){
        if(ptype.equals("cash")){
            if(val == 1){
                dealerbalance = 0.00;
            }else if(val == 2){
                dealerbalance = (paytotal - cash);
            }
        }else if(ptype.equals("cheque")){
            if(val == 1){
                dealerbalance = 0.00;
            }else if(val == 2){
                dealerbalance = (paytotal - chequeamount);
            }
        }else if(ptype.equals("both")){
            if(val == 1){
                dealerbalance = 0.00;
            }else if(val == 2){
                dealerbalance = (paytotal - paidtotal);
            }
        }
        
            if(totalOk()){
                if(addToInvoice(ptype, val2)){
                    if(addToReturn()){
                        if(SetDealerBalance()){
                            JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                        }else{
                            JOptionPane.showMessageDialog(null, "Error! While Setting Dealer Balance, Try Again!", "Error!", 0);
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "Error! While Adding Return Data!", "Warning!", 0);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
            }
            
    }
    
    void payWithoutReturn_Cheque1(){
        
        if(totalOk()){
            if(addToInvoiceWithCheque()){
                if(addToInvoiceRecord()){
                    JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding Invoice Records, Try Again!", "Error!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 0);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
        }
        
        
    }
    
    void payWithoutReturn_Both1(){
        
        if(totalOk()){
            if(addToInvoiceWithBoth()){
                if(addToInvoiceRecord()){
                    JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding Invoice Records, Try Again!", "Error!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 0);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
        }
        
        
    }
    
    void payWithoutReturn_Cheque2(){
        
        dealerbalance = dealerbalance + (paytotal - chequeamount);
        
        if(totalOk()){
            if(addToInvoiceWithCheque()){
                if(addToInvoiceRecord()){
                    if(SetDealerBalance()){
                        JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                    }else{
                        JOptionPane.showMessageDialog(null, "Error! While Setting Dealer Balance, Try Again!", "Error!", 0);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding Invoice Records, Try Again!", "Error!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 2);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
        }
        
        System.out.println("Dealer Balance: " + dealerbalance);
        System.out.println("Pay Total: " + paytotal);
        System.out.println("Cash: " + cash);
    }
    
    void payWithoutReturn_Both2(){
        
        dealerbalance = dealerbalance + (paytotal - paidtotal);
        
        if(totalOk()){
            if(addToInvoiceWithBoth()){
                if(addToInvoiceRecord()){
                    if(SetDealerBalance()){
                        JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                    }else{
                        JOptionPane.showMessageDialog(null, "Error! While Setting Dealer Balance, Try Again!", "Error!", 0);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding Invoice Records, Try Again!", "Error!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 2);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
        }
        
        System.out.println("Dealer Balance: " + dealerbalance);
        System.out.println("Pay Total: " + paytotal);
        System.out.println("Cash: " + cash);
    }
    
    void payWithReturn_cheque1(){
        
        if(totalOk()){
            if(addToInvoiceWithCheque()){
                if(addToInvoiceRecord()){
                    if(addToReturn()){
                        JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                    }else{
                        JOptionPane.showMessageDialog(null, "Error! While Adding Return Records, Try Again!", "Error!", 0);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding Invoice Records, Try Again!", "Error!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 2);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
        }
        
        System.out.println("Dealer Balance2: " + dealerbalance);
        System.out.println("Pay Total2: " + paytotal);
        System.out.println("Cash2: " + cash);
        
    }
    
    void payWithReturn_both1(){
        
        if(totalOk()){
            if(addToInvoiceWithBoth()){
                if(addToInvoiceRecord()){
                    if(addToReturn()){
                        JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                    }else{
                        JOptionPane.showMessageDialog(null, "Error! While Adding Return Records, Try Again!", "Error!", 0);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding Invoice Records, Try Again!", "Error!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 2);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
        }
        
        System.out.println("Dealer Balance2: " + dealerbalance);
        System.out.println("Pay Total2: " + paytotal);
        System.out.println("Cash2: " + cash);
        
    }
    
    void payWithReturn_cheque2(){
        dealerbalance = dealerbalance + (paytotal - chequeamount);
        
        if(totalOk()){
            if(addToInvoiceWithCheque()){
                if(addToInvoiceRecord()){
                    if(addToReturn()){
                        if(SetDealerBalance()){
                            JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                        }else{
                            JOptionPane.showMessageDialog(null, "Error! While Setting Dealer Balance, Try Again!", "Error!", 0);
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "Error! While Adding Return Records, Try Again!", "Error!", 0);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding Invoice Records, Try Again!", "Error!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 2);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
        }
        
        System.out.println("Dealer Balance2: " + dealerbalance);
        System.out.println("Pay Total2: " + paytotal);
        System.out.println("Cash2: " + cash);
        
    }
    
    void payWithReturn_both2(){
        dealerbalance = dealerbalance + (paytotal - paidtotal);
        
        if(totalOk()){
            if(addToInvoiceWithBoth()){
                if(addToInvoiceRecord()){
                    if(addToReturn()){
                        if(SetDealerBalance()){
                            JOptionPane.showMessageDialog(null, "Done! Saved Successfully!", "Done!", 1);
                        }else{
                            JOptionPane.showMessageDialog(null, "Error! While Setting Dealer Balance, Try Again!", "Error!", 0);
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "Error! While Adding Return Records, Try Again!", "Error!", 0);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Error! While Adding Invoice Records, Try Again!", "Error!", 0);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Error! While Adding New invoice!", "Warning!", 2);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Cannot Complete with Minus(-) Total!", "Warning!", 2);
        }
        
        System.out.println("Dealer Balance2: " + dealerbalance);
        System.out.println("Pay Total2: " + paytotal);
        System.out.println("Cash2: " + cash);
        
    }
    
    boolean addChequeDetails(){
        cheque = new Cheque();
        invoice = new Invoice();
        cheque.setInno(invoice.getDealerLatInvoiceNo(dealerid)); 
        cheque.setChnum(Integer.parseInt(tchnumber.getText()));  
        cheque.setCdate(getChequeDate()); 
        cheque.setBank(tchbank.getText()); 
        cheque.setAmount(Double.parseDouble(tchamount.getText()));  
        boolean addchdata = cheque.addChequeData2();
        
        return addchdata;
        
    }
    
//Set data & call to addNewInvoice method in Invoice.java in Model Package-------------------------------------------------------------------------    
    boolean addToInvoice(String paytype, int payval){ 
        System.out.println("PAY(addToInvoice): " + paytotal);
        invoice = new Invoice();
        invrecords = new Invoiceredords();
        bookstock = new Bookstock();
        int lastinvoiceno = 0;
        boolean addtoinv = false;
        boolean addtoinvrec = false;
        boolean updateqty = false;
        boolean val = false;
        double invpaidtotal = 0.0;
        
        if(paytype.equals("cash")){
            if(payval == 0){
                invpaidtotal = cash;
            }else if(payval == 1){
                invpaidtotal = paytotal; 
            }
        }else if(paytype.equals("cheque")){
            if(payval == 0){
                invpaidtotal = chequeamount;
            }else if(payval == 1){
                invpaidtotal = paytotal; 
            }
        }else if(paytype.equals("both")){
            if(payval == 0){
                invpaidtotal = paidtotal;
            }else if(payval == 1){
                invpaidtotal = paytotal; 
            }
        }
        
        invoice.setDealerid(dealerid); 
        invoice.setUserid(MainUI.userid); 
        invoice.setTotal(paytotal); 
        invoice.setPaidtotal(invpaidtotal); 
        invoice.setDate(getToday()); 
        addtoinv = invoice.addNewInvoice(paytype);
            if(addtoinv){
                lastinvoiceno = invoice.getLatInvoiceNo();
                for(int x = 0; x < tblinvoice.getRowCount(); x++){
                    invrecords.setInno(lastinvoiceno);  
                    invrecords.setBookid(Integer.parseInt(tblinvoice.getValueAt(x, 0).toString()));
                    invrecords.setQty(Integer.parseInt(tblinvoice.getValueAt(x, 4).toString()));
                    invrecords.setAmount(Double.parseDouble(tblinvoice.getValueAt(x, 5).toString()));
                    addtoinvrec = invrecords.addNewInvoiceRecord();
                    updateqty = bookstock.DeductBookStock(Integer.parseInt(tblinvoice.getValueAt(x, 4).toString()), Integer.parseInt(tblinvoice.getValueAt(x, 0).toString()));
                }
                
                    if(addtoinvrec && updateqty){
                        val = true;
                    }else{
                        val = false;
                        JOptionPane.showMessageDialog(null, "Error! From Add to Invoice Records, Try Again!", "Error!", 0);
                    }
                
                
            }else{
                JOptionPane.showMessageDialog(null, "Error! From Add to Invoice, Try Again!", "Error!", 0);
                val = false;
            }
            
            return val;
            
    }
    
    boolean addToInvoiceSpecial(){
        invoice = new Invoice();
        
        invoice.setDealerid(dealerid); 
        invoice.setUserid(1); 
        invoice.setTotal(paytotal); 
        invoice.setPaidtotal(paytotal); 
        invoice.setDate(getToday()); 
        boolean val = invoice.addNewCashInvoice();
        
        return val;
        
    }
    
    boolean addToInvoiceWithCheque(){
//        invoice = new Invoice();
//        
//        invoice.setDealerid(dealerid); 
//        invoice.setUserid(1); 
//        invoice.setTotal(paytotal); 
//        invoice.setPaidtotal(chequeamount); 
//        invoice.setDate(getToday()); 
//        invoice.setPaytype("cheque"); 
//        boolean val = invoice.addNewChequeInvoice();
//        
//        return val;
        return false;
    }
    
    boolean addToInvoiceWithBoth(){
//        invoice = new Invoice();
//        
//        invoice.setDealerid(dealerid); 
//        invoice.setUserid(1); 
//        invoice.setTotal(paytotal); 
//        invoice.setPaidtotal(paidtotal); 
//        invoice.setDate(getToday()); 
//        invoice.setPaytype("both"); 
//        boolean val = invoice.addNewChequeInvoice();
//        
//        return val;
        return false;
    }
    
    boolean addToInvoiceRecord(){
        invrecords = new Invoiceredords();
        bookstock = new Bookstock();
        int lastinvoiceno = invoice.getLatInvoiceNo();
        boolean addtodb = false;
        boolean updateqty = false;
        
        for(int x = 0; x < tblinvoice.getRowCount(); x++){
            invrecords.setInno(lastinvoiceno);  
            invrecords.setBookid(Integer.parseInt(tblinvoice.getValueAt(x, 0).toString()));
            invrecords.setQty(Integer.parseInt(tblinvoice.getValueAt(x, 2).toString()));
            invrecords.setAmount(Double.parseDouble(tblinvoice.getValueAt(x, 3).toString()));
            addtodb = invrecords.addNewInvoiceRecord();
            updateqty = bookstock.DeductBookStock(Integer.parseInt(tblinvoice.getValueAt(x, 2).toString()), Integer.parseInt(tblinvoice.getValueAt(x, 0).toString()));
            
        }
        
        if(addtodb && updateqty){
            return true;
        }else{
            return false;
        }
        
        
    }
    
    boolean addToReturn(){
        retrecords = new Returnrecords();
        bookstock = new Bookstock();
        int lastinvoiceno = invoice.getLatInvoiceNo();
        boolean addtodb = false;
        boolean updateqty = false;
        
        for(int y = 0; y < tblreturn.getRowCount(); y++){
            retrecords.setInno(lastinvoiceno);  
            retrecords.setBookid(Integer.parseInt(tblreturn.getValueAt(y, 0).toString()));
            retrecords.setQty(Integer.parseInt(tblreturn.getValueAt(y, 4).toString()));
            retrecords.setAmount(Double.parseDouble(tblreturn.getValueAt(y, 5).toString()));
            addtodb = retrecords.addNewReturnRecord();
            updateqty = bookstock.AddToBookStock(Integer.parseInt(tblreturn.getValueAt(y, 4).toString()), Integer.parseInt(tblreturn.getValueAt(y, 0).toString())); 
        }
        
        if(addtodb && updateqty){
            return true;
        }else{
            return false;
        }
        
    }
    
    boolean SetDealerBalance(){
        dealerbal = new Dealerbalance();
        dealerbal.setDealerid(dealerid); 
        dealerbal.setNetbalance(dealerbalance);
        dealerbal.setBalancedate(getToday()); 
        boolean val = dealerbal.updateDealerBalance();
        
        return val;
        
    }
    
    String getToday(){
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String today = df.format(cal.getTime());
        
        return today;
    }
    
    String getTodayOnly(){
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String today = df.format(cal.getTime());
        
        return today;
    }
    
    String getTodayTimeOnly(){
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat df = new SimpleDateFormat("HH:mm:ss");
        String today = df.format(cal.getTime());
        
        return today;
    }
    
    String getChequeDate(){
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String chdate = df.format(dtchdate.getDate());
        
        return chdate;
    }
    
    void clearTable(JTable tbl){
        DefaultTableModel dt = (DefaultTableModel) tbl.getModel();
        int rows = tbl.getRowCount();
            for(int x=0; x < rows; x++){
                dt.removeRow(0); 
            }
        
    }
    
    void setInvoiceDetails(int paytype){
        printinvoice = new Printinvoice();
        Vector vecbooks1 = new Vector();
        Vector vecbooks2 = new Vector();
        Vector vecqty1 = new Vector();
        Vector vecqty2 = new Vector();
        Vector veciprice1 = new Vector();
        Vector veciprice2 = new Vector();
        Vector vecdprice1 = new Vector();
        Vector vecdprice2 = new Vector();
        Vector vecamount1 = new Vector();
        Vector vecamount2 = new Vector();
        int invrows = tblinvoice.getRowCount();
        int retrows = tblreturn.getRowCount();
        invoice = new Invoice();
        int lastinno = invoice.getLatInvoiceNo();
        
        printinvoice.setDealer(this.currdealer + "-" + this.dcity + " (" + this.dealerid + ")");
        printinvoice.setDate(getTodayOnly()); 
        printinvoice.setTime(getTodayTimeOnly()); 
        printinvoice.setInno(lastinno); 
        printinvoice.setDealerbal(dealerbalance); 
        
        for(int x = 0; x < invrows; x++){
                vecbooks1.add(tblinvoice.getValueAt(x, 1));
                veciprice1.add(tblinvoice.getValueAt(x, 2));
                vecdprice1.add(tblinvoice.getValueAt(x, 3));
                vecqty1.add(tblinvoice.getValueAt(x, 4));
                vecamount1.add(tblinvoice.getValueAt(x, 5));
                printinvoice.setBooks1(vecbooks1);
                printinvoice.setIprice1(veciprice1);
                printinvoice.setDprice1(vecdprice1);
                printinvoice.setQty1(vecqty1);
                printinvoice.setAmount1(vecamount1);
        }
            
        for(int y = 0; y < retrows; y++){
                vecbooks2.add(tblreturn.getValueAt(y, 1)); 
                veciprice2.add(tblreturn.getValueAt(y, 2));
                vecdprice2.add(tblreturn.getValueAt(y, 3));
                vecqty2.add(tblreturn.getValueAt(y, 4));
                vecamount2.add(tblreturn.getValueAt(y, 5));
                printinvoice.setBooks2(vecbooks2);
                printinvoice.setIprice2(veciprice2);
                printinvoice.setDprice2(vecdprice2);
                printinvoice.setQty2(vecqty2);
                printinvoice.setAmount2(vecamount2);
        }
        
        if(paytype == 1){
            printinvoice.setPaymethod("Cash");
            
            printinvoice.setCurrdbalance(currdbalance); 
            printinvoice.setInvoicetotal(soldtotal);
            printinvoice.setReturntotal(returntotal);
            printinvoice.setTotalamount(paytotal); 
            printinvoice.setCash(cash); 
            printinvoice.setChamount(0.00); 
            printinvoice.setBalance(balance);
            printinvoice.setChnumber(00000); 
            printinvoice.setChdate("No Date"); 
            printinvoice.setBank("No Bank"); 
            
        }else if (paytype == 2){
            printinvoice.setPaymethod("Cheque");
            
            printinvoice.setCurrdbalance(currdbalance);
            printinvoice.setInvoicetotal(soldtotal);
            printinvoice.setReturntotal(returntotal);
            printinvoice.setTotalamount(paytotal); 
            printinvoice.setCash(0.00); 
            printinvoice.setChamount(chequeamount); 
            printinvoice.setBalance(balance);
            printinvoice.setChnumber(Integer.parseInt(tchnumber.getText()));  
            printinvoice.setChdate(getChequeDate()); 
            printinvoice.setBank(tchbank.getText()); 
        }else if (paytype == 3){
            printinvoice.setPaymethod("Cash & Cheque");
            
            printinvoice.setCurrdbalance(currdbalance);
            printinvoice.setInvoicetotal(soldtotal);
            printinvoice.setReturntotal(returntotal);
            printinvoice.setTotalamount(paytotal); 
            printinvoice.setCash(cash); 
            printinvoice.setChamount(chequeamount); 
            printinvoice.setBalance(balance);
            printinvoice.setChnumber(Integer.parseInt(tchnumber.getText())); 
            printinvoice.setChdate(getChequeDate()); 
            printinvoice.setBank(tchbank.getText());
        }
        
        
    }
    
    void returnOnlyMessage(){
        JOptionPane.showMessageDialog(null, "Without Buying Books, No Returns", "Warning!", 2); 
        
    }
    
    void setZero(){
        this.soldtotal = 0.0;
        this.invoicetotal = 0.0;
        this.returntotal = 0.0;
        this.cash = 0.0;
        this.balance = 0.0;
        this.dealerbalance = 0.0;
        this.itemprice = 0.0;
        this.amount = 0.0;
        this.paytotal = 0.0;
        this.chequeamount = 0.0;
        this.chequeno = 0;
        
        ltotal.setText(""+paytotal);
        lcash.setText(""+cash);
        lbalance.setText(""+balance);
        lsoldtotal.setText(""+invoicetotal);
        lreturntot.setText(""+returntotal);
        linvoicetot.setText(""+invoicetotal); 
        tchamount.setText("");
        tchnumber.setText(""); 
        tchbank.setText(""); 
        
        
    }
    
    void initalProcesses(){
        listdealer.setVisible(false); 
        listbook.setVisible(false);
        scrolldealer.setVisible(false);
        scrollbook.setVisible(false);
        tchamount.setEnabled(false);
        tchnumber.setEnabled(false);
        
        ButtonModel cash = rbtncash.getModel();
        paymethod.setSelected(cash, true);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton baddinvoice;
    private javax.swing.JButton baddreturn;
    private javax.swing.JButton bcomplete;
    private javax.swing.JButton bdel1;
    private javax.swing.JButton bdel2;
    private javax.swing.JCheckBox chnodiscount;
    private javax.swing.JComboBox cmbdiscount;
    private com.toedter.calendar.JDateChooser dtchdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lamount;
    private javax.swing.JLabel lbalance;
    private javax.swing.JLabel lcash;
    private javax.swing.JLabel lcredit;
    private javax.swing.JLabel ldiscprice;
    private javax.swing.JLabel linvoicetot;
    private javax.swing.JList listbook;
    private javax.swing.JList listdealer;
    private javax.swing.JLabel litemprice;
    private javax.swing.JLabel lreturntot;
    private javax.swing.JLabel lsignal;
    private javax.swing.JLabel lsoldtotal;
    private javax.swing.JLabel ltotal;
    private javax.swing.ButtonGroup paymethod;
    private javax.swing.JRadioButton rbtnboth;
    private javax.swing.JRadioButton rbtncash;
    private javax.swing.JRadioButton rbtncheque;
    private javax.swing.JRadioButton rbtncustomer;
    private javax.swing.JRadioButton rbtndealer;
    private javax.swing.JScrollPane scrollbook;
    private javax.swing.JScrollPane scrolldealer;
    private javax.swing.JTable tblinvoice;
    private javax.swing.JTable tblreturn;
    private javax.swing.JTextField tbook;
    private javax.swing.JTextField tcash;
    private javax.swing.JTextField tchamount;
    private javax.swing.JTextField tchbank;
    private javax.swing.JTextField tchnumber;
    private javax.swing.JTextField tdealer;
    private javax.swing.JTextField tqty;
    private javax.swing.ButtonGroup type;
    // End of variables declaration//GEN-END:variables
}
